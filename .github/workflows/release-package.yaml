name: Release Package

on:
  release:
    types: [created]

jobs:
  deploy-node-sdk:
    name: Deploy Node SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set release version
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"

      - name: Clone the public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${REPO_TOKEN}@github.com/ParceladoLara/payment-plan-node-sdk.git public-repo
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Copy Node SDK to the public repository
        run: |
          cp -r sdks/node/src/* public-repo/src/
          cp -r sdks/node/types/* public-repo/types/
          cd public-repo
          python3 -c "import os; import json; p = json.load(open('./package.json')); p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('./package.json', 'w'), indent=2, ensure_ascii=False);"
          git add .
          git commit -m "Update Node SDK" --allow-empty
      - name: Push Node SDK to public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd public-repo
          git push origin main --force

  deploy-go-sdk:
    name: Deploy Go SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Clone the public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${REPO_TOKEN}@github.com/ParceladoLara/payment-plan-go-sdk.git public-repo
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Copy Go SDK to the public repository
        run: |
          cp -r sdks/go/* public-repo/
          cd public-repo
          git add .
          git commit -m "Update Go SDK"  --allow-empty

      - name: Push Go SDK to public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd public-repo
          git push origin main --force

  deploy-python-sdk:
    name: Deploy Python SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Clone the public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${REPO_TOKEN}@github.com/ParceladoLara/payment-plan-python-sdk.git public-repo
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Copy Go SDK to the public repository
        run: |
          cp -r sdks/python/* public-repo/
          cd public-repo
          git add .
          git commit -m "Update Python SDK" --allow-empty

      - name: Push Python SDK to public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd public-repo
          git push origin main --force

  deploy-wasm-sdk:
    name: Deploy Wasm SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set release version
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"

      - name: Clone the public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${REPO_TOKEN}@github.com/ParceladoLara/payment-plan-wasm-sdk.git public-repo
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Copy Wasm SDK to the public repository
        run: |
          cp -r sdks/web/* public-repo/
          cd public-repo
          python3 -c "import os; import json; p = json.load(open('./package.json')); p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('./package.json', 'w'), indent=2, ensure_ascii=False);"
          npm i
          git add .
          git commit -m "Update Wasm SDK" --allow-empty

      - name: Push Wasm SDK to public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd public-repo
          git push origin main --force

  draft-node-sdk-release:
    name: Create Release on payment-plan-node-sdk
    runs-on: ubuntu-latest
    needs: deploy-node-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
      - name: Create release on payment-plan-node-sdk
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh release create "${{ env.RELEASE_VERSION }}" \
            --draft \
            --repo ParceladoLara/payment-plan-node-sdk \
            --title "${{ env.RELEASE_VERSION }}" \
            --notes "Automated release from payment-plan"

  create-go-sdk-release:
    name: Create Release on payment-plan-go-sdk
    runs-on: ubuntu-latest
    needs: deploy-go-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
      - name: Create release on payment-plan-go-sdk
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh release create "${{ env.RELEASE_VERSION }}" \
            --repo ParceladoLara/payment-plan-go-sdk \
            --title "${{ env.RELEASE_VERSION }}" \
            --notes "Automated release from payment-plan"

  create-wasm-sdk-release:
    name: Create Release on payment-plan-wasm-sdk
    runs-on: ubuntu-latest
    needs: deploy-wasm-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
      - name: Create release on payment-plan-wasm-sdk
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh release create "${{ env.RELEASE_VERSION }}" \
            --repo ParceladoLara/payment-plan-wasm-sdk \
            --title "${{ env.RELEASE_VERSION }}" \
            --notes "Automated release from payment-plan"

  upload-node-sdk-artifacts:
    needs: draft-node-sdk-release
    name: Upload Node SDK Artifacts ${{ matrix.node_version }}-${{ matrix.system.target }}-${{ matrix.system.os }}
    runs-on: ${{ matrix.system.os }}
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - 20
          - 22
        system:
          # apple-darwin is being skipped because the runner is taking too long to start.
          #- os: macos-11
          #target: x86_64-apple-darwin
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: windows-2022
            target: x86_64-pc-windows-msvc
          # Would like to have aarch64 support, but actions does not provide these yet.
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        # Set release version in all three os, the commented run should suffice for linux and mac.
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: "https://registry.npmjs.org"
      - name: Install modules
        run: cd generators/node && npm i
      - name: Tweak package.json
        # This will update the package version to tag version. So artifacts uploaded to Github release will be named correctly.
        run: python3 -c "import os; import json; p = json.load(open('./generators/node/package.json')); p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('./generators/node/package.json', 'w'), indent=2, ensure_ascii=False);"

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.system.target }}
          override: true

      - name: Build native
        run: cd generators/node && npm run build:iterative # for now we are using iterative
      - name: Package the asset
        # This will make a node-pre-gyp package.
        run: cd generators/node && npm run build:iterative && npx node-pre-gyp package
      - name: Upload to Github releases
        # Use bash, even on Windows to make find available
        shell: bash
        # A release need to be created before upload
        run: gh release upload ${{ env.RELEASE_VERSION }} -R ParceladoLara/payment-plan-node-sdk "$(find ./generators/node/build -name *.tar.gz)" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

  release-node-sdk:
    name: Release Node SDK
    runs-on: ubuntu-latest
    needs: upload-node-sdk-artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - name: Set release version
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"

      - name: Clone the public repository
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${REPO_TOKEN}@github.com/ParceladoLara/payment-plan-node-sdk.git public-repo
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Npm i
        run: |
          cd public-repo
          mkdir native
          touch native/index.node
          npm i
          rm -rf native
          git add .
          git commit -m "Update Node SDK" --allow-empty
          git push origin main --force
      - name: Create release on payment-plan-node-sdk
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh release edit "${{ env.RELEASE_VERSION }}" \
          --repo ParceladoLara/payment-plan-node-sdk \
          --draft=false

# This job is for musl based linux systems.(not working yet)
#  nodejs-github-native-musl:
#    name: musl-branch-${{ matrix.branch }}-x86_64-unknown-linux-musl-${{ matrix.system.os }}
#    runs-on: ubuntu-24.04
#    strategy:
#      fail-fast: false
#      matrix:
#        branch:
#          - v3.21 #nodejs 22
#          - v3.20 #nodejs 20
#        system:
#          - os: ubuntu-24.04
#            target: x86_64-unknown-linux-musl
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          ref: ${{ github.event.release.tag_name }}
#      - name: Set release version
#        # Set release version in all three os, the commented run should suffice for linux and mac.
#        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
#        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#
#      - name: Setup latest Alpine Linux
#        uses: jirutka/setup-alpine@v1
#
#      - name: install nodejs
#        run: |
#          echo "http://dl-cdn.alpinelinux.org/alpine/${{matrix.branch}}/main" > /etc/apk/repositories
#          apk update
#          apk add --no-cache nodejs
#        shell: alpine.sh --root {0}
#
#      - name: install npm
#        # i'm hardcoding the version of npm here, because the version of npm in the alpine repo is too old.
#        run: |
#          echo "http://dl-cdn.alpinelinux.org/alpine/v3.21/community" > /etc/apk/repositories
#          apk update
#          apk add npm
#        shell: alpine.sh --root {0}
#
#      - name: install cargo
#        run: |
#          echo "https://dl-cdn.alpinelinux.org/alpine/edge/main/" > /etc/apk/repositories
#          apk update
#          apk upgrade --ignore nodejs --ignore npm
#          apk add cargo
#        shell: alpine.sh --root {0}
#
#      - name: Install modules
#        run: |
#          cd generators/node
#          npm i
#        shell: alpine.sh --root {0}
#
#      - name: Tweak package.json
#        # This will update the package version to tag version. So artifacts uploaded to Github release will be named correctly.
#        run: python3 -c "import os; import json; p = json.load(open('./generators/node/package.json')); p['version'] = os.environ['RELEASE_VERSION']; json.dump(p, open('./generators/node/package.json', 'w'), indent=2, ensure_ascii=False);"
#
#      - name: Build native
#        run: |
#          cd generators/node
#          npm run build:iterative
#        shell: alpine.sh --root {0}
#
#      - name: Package the asset
#        run: |
#          cd generators/node
#          npx node-pre-gyp package
#        shell: alpine.sh --root {0}
#
#      - name: Upload to Github releases
#        # Use bash, even on Windows to make find available
#        shell: bash
#        # A release need to be created before upload
#        run: gh release upload ${{ env.RELEASE_VERSION }} "$(find ./generators/node/build -name *.tar.gz)" --clobber
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
