syntax = "proto3";

package cli.types;

option go_package = "playment_plan/protos";


message PlanParams {
    double requested_amount = 1;
    int64 first_payment_date_millis = 2;
    int64 requested_date_millis = 3;
    uint32 installments = 4;
    uint32 debit_service_percentage = 5;
    double mdr = 6;
    double tac_percentage = 7;
    double iof_overall = 8;
    double iof_percentage = 9;
    double interest_rate = 10;
    double min_installment_amount = 11;
    double max_total_amount = 12;
}

message PlanResponse {
    uint32 installment = 1;
    int64 due_date_millis = 2;
    int64 accumulated_days = 3;
    double days_index = 4;
    double accumulated_days_index = 5;
    double interest_rate = 6;
    double installment_amount = 7;
    double installment_amount_without_tac = 8;
    double total_amount = 9;
    double debit_service = 10;
    double customer_debit_service_amount = 11;
    double customer_amount = 12;
    double calculation_basis_for_effective_interest_rate = 13;
    double merchant_debit_service_amount = 14;
    double merchant_total_amount = 15;
    double settled_to_merchant = 16;
    double mdr_amount = 17;
    double effective_interest_rate = 18;
    double total_effective_cost = 19;
    double eir_yearly = 20;
    double tec_yearly = 21;
    double eir_monthly = 22;
    double tec_monthly = 23;
    double total_iof = 24;
    double contract_amount = 25;
    double contract_amount_without_tac = 26;
    double tac_amount = 27;
    double iof_percentage = 28;
    double overall_iof = 29;
}

message PlanResponses {
    repeated PlanResponse responses = 1;
}


message DownPaymentParams {
    PlanParams params = 1;
    double requested_amount = 2;
    double min_installment_amount = 3;
    int64 first_payment_date_millis = 4;
    uint32 installments = 5;
}

message DownPaymentResponse {
    double installment_amount = 1;
    double total_amount = 2;
    uint32 installment_quantity = 3;
    int64 first_payment_date_millis = 4;
    PlanResponses plans = 5;
}

message DownPaymentResponses {
    repeated DownPaymentResponse responses = 1;
}

//Reimbursement

enum InvoiceStatusReimbursement {
    OVERDUE = 0;
    CREATED = 1;
    READJUSTED = 2;
    PAID = 3;
}


message InvoiceParamReimbursement {
    uint32 id = 1;
    InvoiceStatusReimbursement status = 2;
    double original_amount = 3;
    int64 due_at_millis = 4;
    double main_iof_tac = 5;
}

message InvoiceResponseReimbursement {
    uint32 id = 1;
    int64 days_difference_between_repurchase_date_and_due_at = 2;
    double present_value_repurchase = 3;
}

message ReimbursementParams {
    double fee = 1;
    double mdr = 2;
    double invoice_cost = 3;
    double interest_rate = 4;
    int64 base_date_millis = 5;
    int64 max_repurchase_payment_days = 6;
    int64 max_reimbursement_payment_days = 7;
    repeated InvoiceParamReimbursement invoices = 8;
}


message ReimbursementResponse {
    double total_present_value_repurchase = 1;
    double reimbursement_value = 2;
    int64 reference_date_for_repurchase_millis = 3;
    double interest_rate_daily = 4;
    double subsidy_for_cancellation = 5;
    double customer_charge_back_amount = 6;
    int64 reimbursement_invoice_due_date_millis = 7;
    repeated InvoiceResponseReimbursement invoices = 8;
}